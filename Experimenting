library(tidyverse)
sets <- data.frame(properties = list())

add_set <- function(newID) {
  new_row <- data.frame(properties = I(list(data.frame(ava = TRUE))))
  names(new_row$properties) <- newID
  sets <<- rbind(sets, new_row)
  row.names(sets)[nrow(sets)] <<- newID  # Set row name for the new row
}
set_tag <- function(setID, TagName, state = TRUE) { #don't use for avaiable [ava]
  if(state) {
    if(!(TagName %in% names(users))) add_tag(TagName)
    sets$properties[[setID]][[TagName]] <<- TRUE
  }
  else sets$properties[[setID]][[TagName]] <<- NULL
}
set_avaiability <- function(setID, state = TRUE) {
  sets$properties[[setID]]$ava <<- state
}
remove_tag<-function(TagName){
  users[[TagName]] <- NULL
}
add_tag <- function(TagName){
  users[[TagName]] <<- 100
}
remove_set <- function(setID) {
  if (setID %in% row.names(sets)) {
    sets <<- sets[row.names(sets) != setID, , drop = FALSE]
  } else {
    warning(paste0("Row '", setID, "' not found in sets."))
  }
}
users <- data.frame(100)
names(users) <- "White"
row.names(users) <- "initial"

add_user <- function(newID) {
  new_row <- list(rep(100, ncol(users)))
  users <<- rbind(users, unlist(new_row))
  row.names(users)[nrow(users)] <<- newID
}
remove_user <- function(UserID){
  users <<- users %>% filter(row.names(users) != UserID) # don't remove the last user
}

give_next <- function(UserID){ # returns a random set from the top 5 best match from 100 randomly selected sets
  x <- sample(nrow(sets),min(nrow(sets),100),replace = FALSE)
  y<- vector("numeric", length = min(nrow(sets),100))
  i<- 1
  for (rownum in x) {
    tags <- sets$properties[rownum][[names(sets$properties[rownum])]]
    tags <- tags[-1]
    #print(tags)
    weight<-0
    for (tag in names(tags)) {
      weight <- weight + as.numeric(users[UserID,tag])
    #print(weight)
    }
    y[i] <- (weight/length(tags))
    i <- i+1
  }
  #print("y: ")
  #print(y)
  #print("x: ")
  #print(x)
  y <- order(y,decreasing = TRUE)
  #print("yordered: ")
  #print(y)
  x <- x[y]
  #print("xordered: ")
  #print(x)
  a <- sample(1:min(nrow(sets),5),1)
  return (sets$properties[x[a]])
}
